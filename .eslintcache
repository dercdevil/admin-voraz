[{"E:\\front_tukitchen\\src\\index.js":"1","E:\\front_tukitchen\\src\\App.js":"2","E:\\front_tukitchen\\src\\reportWebVitals.js":"3","E:\\front_tukitchen\\src\\utils\\functions.js":"4","E:\\front_tukitchen\\src\\containers\\MainContainer.jsx":"5","E:\\front_tukitchen\\src\\containers\\BlankContainer.jsx":"6","E:\\front_tukitchen\\src\\pages\\AuthPage.jsx":"7","E:\\front_tukitchen\\src\\pages\\ProductsPremiunPage.jsx":"8","E:\\front_tukitchen\\src\\pages\\CategoryPage.jsx":"9","E:\\front_tukitchen\\src\\pages\\CouponPage.jsx":"10","E:\\front_tukitchen\\src\\pages\\PaymentPage.jsx":"11","E:\\front_tukitchen\\src\\pages\\ProfilePage.jsx":"12","E:\\front_tukitchen\\src\\pages\\DashboardPage.jsx":"13","E:\\front_tukitchen\\src\\utils\\constants.js":"14","E:\\front_tukitchen\\src\\components\\LayoutComponent.jsx":"15","E:\\front_tukitchen\\src\\components\\LoadingComponent.jsx":"16","E:\\front_tukitchen\\src\\components\\Table.jsx":"17","E:\\front_tukitchen\\src\\components\\input\\InputComponentRef.jsx":"18","E:\\front_tukitchen\\src\\components\\input\\InputComponent.jsx":"19","E:\\front_tukitchen\\src\\components\\NavbarComponent.jsx":"20","E:\\front_tukitchen\\src\\pages\\RegisterUser.jsx":"21","E:\\front_tukitchen\\src\\utils\\nameStore.js":"22","E:\\front_tukitchen\\src\\components\\ModalComponent.jsx":"23"},{"size":949,"mtime":1612483390961,"results":"24","hashOfConfig":"25"},{"size":1519,"mtime":1612968318155,"results":"26","hashOfConfig":"25"},{"size":375,"mtime":1612483390964,"results":"27","hashOfConfig":"25"},{"size":3590,"mtime":1614491098872,"results":"28","hashOfConfig":"25"},{"size":844,"mtime":1612483390961,"results":"29","hashOfConfig":"25"},{"size":832,"mtime":1612483390961,"results":"30","hashOfConfig":"25"},{"size":6858,"mtime":1617389973029,"results":"31","hashOfConfig":"25"},{"size":3320,"mtime":1617316764533,"results":"32","hashOfConfig":"25"},{"size":5439,"mtime":1612977916254,"results":"33","hashOfConfig":"25"},{"size":9701,"mtime":1617391073111,"results":"34","hashOfConfig":"25"},{"size":6383,"mtime":1617316533846,"results":"35","hashOfConfig":"25"},{"size":6274,"mtime":1613136386899,"results":"36","hashOfConfig":"25"},{"size":8159,"mtime":1617388497869,"results":"37","hashOfConfig":"25"},{"size":53,"mtime":1617029440112,"results":"38","hashOfConfig":"25"},{"size":423,"mtime":1612483390958,"results":"39","hashOfConfig":"25"},{"size":512,"mtime":1612483390958,"results":"40","hashOfConfig":"25"},{"size":9317,"mtime":1612483390959,"results":"41","hashOfConfig":"25"},{"size":4919,"mtime":1612483390960,"results":"42","hashOfConfig":"25"},{"size":4800,"mtime":1612483390960,"results":"43","hashOfConfig":"25"},{"size":1647,"mtime":1617389396281,"results":"44","hashOfConfig":"25"},{"size":4840,"mtime":1615659614903,"results":"45","hashOfConfig":"25"},{"size":171,"mtime":1614543495577,"results":"46","hashOfConfig":"25"},{"size":2099,"mtime":1617389194100,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1id6ny0",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"50"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"50"},"E:\\front_tukitchen\\src\\index.js",[],["111","112"],"E:\\front_tukitchen\\src\\App.js",[],"E:\\front_tukitchen\\src\\reportWebVitals.js",[],"E:\\front_tukitchen\\src\\utils\\functions.js",[],"E:\\front_tukitchen\\src\\containers\\MainContainer.jsx",["113","114"],"import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport LayoutComponent from '../components/LayoutComponent'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\n\r\nconst MainContainer = (props) => {\r\n\r\n  const [validate,setValidate] = useState(true)\r\n\r\n  useEffect(() => {\r\n    let user = localStorage.getItem('userApp')\r\n    let token = localStorage.getItem('tokenApp')\r\n    if(!user || !token){\r\n      setValidate(false)\r\n    }\r\n  },[])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {validate ? (\r\n        <LayoutComponent {...props}>\r\n          <br/><br/>\r\n          {props.children}\r\n          <ToastContainer />\r\n        </LayoutComponent>\r\n      ) : (\r\n        <Redirect to=\"/\" />\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default MainContainer\r\n","E:\\front_tukitchen\\src\\containers\\BlankContainer.jsx",["115","116","117"],"import React, {useState, useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Route } from 'react-router-dom';\r\nimport {Redirect} from 'react-router-dom'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\n\r\nconst BlankContainer = ({component : Component, layout: Layout,...rest}) => {\r\n\r\n  const [validate,setValidate] = useState(true)\r\n\r\n  useEffect(() => {\r\n    let user = localStorage.getItem('userApp')\r\n    let token = localStorage.getItem('tokenApp')\r\n    if(user && token){\r\n      setValidate(false)\r\n    }\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      {validate ? (\r\n        <Route\r\n          {...rest}\r\n          render={props => (\r\n            <Component {...props} />\r\n          )}\r\n        />\r\n      ) : (\r\n        <Redirect to=\"/dashboard\" />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BlankContainer\r\n","E:\\front_tukitchen\\src\\pages\\AuthPage.jsx",[],"E:\\front_tukitchen\\src\\pages\\ProductsPremiunPage.jsx",["118","119","120"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Table from \"../components/Table\";\r\nimport { Row, Col, Button, Badge } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../utils/constants\";\r\nimport { handleResponseApi, formatNumber } from \"../utils/functions\";\r\nimport { toast } from \"react-toastify\";\r\nimport LoadingComponent from \"../components/LoadingComponent\";\r\n\r\nlet productsColumns = [];\r\n\r\nconst ProductsPremiunPage = (props) => {\r\n  const [products, setProducts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useMemo(() => {\r\n    productsColumns = [\r\n      {\r\n        Header: \"Nombre\",\r\n        accessor: \"name\",\r\n      },\r\n      {\r\n        Header: \"DescripciÃ³n\",\r\n        accessor: \"description\",\r\n      },\r\n      {\r\n        Header: \"Precio\",\r\n        accessor: \"price\",\r\n        Cell: (props1) => {\r\n          const { original } = props1.cell.row;\r\n          return formatNumber(original.price, 2, \",\", \".\");\r\n        },\r\n      },\r\n      {\r\n        Header: \"Tienda\",\r\n        accessor: (props1) => [props1.profile?.name_store],\r\n      },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: (props1) => (props1.is_premium ? [\"premium\"] : [\"normal\"]),\r\n        Cell: (props1) => {\r\n          const { original } = props1.cell.row;\r\n          return (\r\n            <Badge variant=\"warning\" className=\"font_badge\">\r\n              {original.is_premium ? \"Premium\" : \"Normal\"}\r\n            </Badge>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        Header: \"AcciÃ³n\",\r\n        Cell: (props1) => {\r\n          return (\r\n            <Button\r\n              variant=\"primary\"\r\n              block={true}\r\n              size=\"size\"\r\n              onClick={() => changeStatus(props1.cell.row.original)}\r\n            >\r\n              Cambiar Status\r\n            </Button>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    axios\r\n      .get(API_URL + \"products\", {\r\n        params: {\r\n          not_paginate: true,\r\n        },\r\n      })\r\n      .then((result) => {\r\n        setIsLoading(false);\r\n        setProducts(result.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        handleResponseApi(err, props.history);\r\n      });\r\n  };\r\n\r\n  const changeStatus = (data) => {\r\n    setIsLoading(true);\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    axios\r\n      .put(\r\n        API_URL + \"admin-update-product/\" + data.id,\r\n        { is_premium: !data.is_premium },\r\n        { headers: { \"x-access-token\": token } }\r\n      )\r\n      .then((result) => {\r\n        toast.success(\"Status cambiado correctamente\");\r\n        fetchData();\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        handleResponseApi(err, props.history);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={11} md={11} lg={11} xl={11} xs={12}>\r\n        {isLoading ? (\r\n          <LoadingComponent />\r\n        ) : (\r\n          <>\r\n            <h3 className=\"text-center\">Productos</h3>\r\n            <Table data={products} columns={productsColumns} />\r\n          </>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ProductsPremiunPage;\r\n","E:\\front_tukitchen\\src\\pages\\CategoryPage.jsx",["121","122","123","124","125"],"import React, {useState, useEffect, useMemo, useRef} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Table from '../components/Table'\r\nimport {Row, Col, Button, Badge, DropdownButton, Dropdown, Form} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport { API_URL } from '../utils/constants'\r\nimport { handleResponseApi, formatNumber } from '../utils/functions'\r\nimport {toast} from 'react-toastify'\r\nimport InputFieldRef from '../components/input/InputComponentRef'\r\nimport {confirmAlert} from 'react-confirm-alert'\r\nimport LoadingComponent from '../components/LoadingComponent'\r\n\r\nlet categorysColumns = []\r\n\r\nconst CategoryPage = (props) => {\r\n\r\n  const [categories,setCategories] = useState([])\r\n  const [validated, setValidated] = useState(false)\r\n  const [data, setData] = useState({name: \"\",id: \"\"})\r\n  const [isLoading,setIsLoading] = useState(true)\r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  },[])\r\n\r\n  useEffect(() =>{\r\n    if(inputRef && !isLoading){\r\n      inputRef.current.focus()\r\n    }\r\n  },[inputRef,isLoading])\r\n\r\n  useMemo(() => {\r\n    categorysColumns = [\r\n      {\r\n        Header: \"Nombre\",\r\n        accessor: \"name\"\r\n      },\r\n      {\r\n        Header: \"AcciÃ³n\",\r\n        Cell : props1 => {\r\n          const {original} = props1.cell.row\r\n          return (\r\n            <DropdownButton size=\"sm\" id={'drop'+original.id} title=\"Seleccione\"  block=\"true\">\r\n              <Dropdown.Item onClick={() => modifyRegister(original)}>Modificar</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => deleteRegister(original.id)}>Eliminar</Dropdown.Item>\r\n            </DropdownButton>\r\n          )\r\n        }\r\n      }\r\n    ]\r\n  },[])\r\n\r\n  const onChange = e => {\r\n    setData({...data, [e.target.name] : e.target.value })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n\r\n    const form = e.currentTarget;\r\n    e.preventDefault();\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n      return\r\n    }\r\n\r\n    let dataPost = Object.assign({},data)\r\n    let route = dataPost.id ? API_URL+'categories/'+dataPost.id : API_URL+'categories'\r\n    let message = dataPost.id ? \"Categoria modificada con Ã©xito\" : \"Categoria creada con Ã©xito\"\r\n    let token = localStorage.getItem('tokenApp')\r\n    let request = dataPost.id ? axios.put(route,dataPost, { headers: { \"x-access-token\": token }}) : axios.post(route,dataPost,  { headers: { \"x-access-token\": token }})\r\n    delete dataPost.id\r\n    setIsLoading(true)\r\n    request.then(result => {\r\n      toast.success(message)\r\n      cleanData()\r\n      fetchData()\r\n    }).catch(err => {\r\n      setIsLoading(false)\r\n      handleResponseApi(err,props.history)\r\n    })\r\n  }\r\n\r\n  const deleteRegister = id => {\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        return (\r\n          <div className='custom-ui-edit'>\r\n            <h1>Â¿Esta seguro?</h1>\r\n            <p className=\"font-alert\">Â¿Desea realmente borrar este registro?</p>\r\n            <button className=\"button-alert\"\r\n              onClick={() => {\r\n                confirmDeleteRegister(id);\r\n                onClose();\r\n              }}\r\n            >\r\n              Si, Aceptar\r\n            </button>\r\n            <button className=\"button-alert\" onClick={onClose}>No</button>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  const confirmDeleteRegister = id => {\r\n    setIsLoading(true)\r\n    let token = localStorage.getItem('tokenApp')\r\n    axios.delete(API_URL+'categories/'+id, { headers: { \"x-access-token\": token }}).then(result => {\r\n      toast.success('Registro eliminado con Ã©xito')\r\n      fetchData()\r\n    }).catch(err => {\r\n      handleResponseApi(err,props.history)\r\n      setIsLoading(false)\r\n    })\r\n  }\r\n\r\n  const cleanData = () => {\r\n    setData({id : \"\", name : \"\"})\r\n  }\r\n\r\n const fetchData = () => {\r\n   axios.get(API_URL+\"categories\").then(result => {\r\n       setIsLoading(false)\r\n        setCategories(result.data.docs)\r\n   }).catch(err => {\r\n     setIsLoading(false)\r\n     handleResponseApi(err,props.history)\r\n   })\r\n }\r\n\r\n const modifyRegister = data => {\r\n   setData({...data,name: data.name, id: data.id})\r\n   inputRef.current.focus();\r\n }\r\n\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={10} md={10} lg={10} xl={10} xs={12}>\r\n      {isLoading ? (\r\n        <LoadingComponent />\r\n      ) : (\r\n        <>\r\n          <Form onSubmit={handleSubmit} noValidate validated={validated}>\r\n            <Row>\r\n              <Col>\r\n                <h3 className=\"text-center\">Categorias</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <InputFieldRef\r\n                ref={inputRef}\r\n                type='text'\r\n                label='Nombre'\r\n                name='name'\r\n                required={true}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-8 col-lg-8 col-sm-8'\r\n                value={data.name}\r\n                handleChange={onChange}\r\n                />\r\n              <Col sm={4} md={4} lg={4} xl={4}>\r\n                <br/>\r\n                <Button variant=\"primary\" block={true} size=\"sm\" type=\"submit\">Enviar</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          <br/>\r\n          <Table data={categories} columns={categorysColumns} />\r\n        </>\r\n      )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default CategoryPage\r\n","E:\\front_tukitchen\\src\\pages\\CouponPage.jsx",["126","127","128","129","130"],"import React, { useState, useEffect, useMemo, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Table from \"../components/Table\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge,\r\n  DropdownButton,\r\n  Dropdown,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../utils/constants\";\r\nimport { handleResponseApi, formatNumber } from \"../utils/functions\";\r\nimport { nameStore } from \"../utils/nameStore\";\r\nimport { toast } from \"react-toastify\";\r\nimport InputFieldRef from \"../components/input/InputComponentRef\";\r\nimport InputField from \"../components/input/InputComponent\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport LoadingComponent from \"../components/LoadingComponent\";\r\nimport * as moment from \"moment-timezone\";\r\n\r\nlet couponColumns = [];\r\n\r\nconst CouponPage = (props) => {\r\n  const [coupons, setCoupons] = useState([]);\r\n  const [validated, setValidated] = useState(false);\r\n  const [stores, setStores] = useState([]);\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    is_used: true,\r\n    discount: \"\",\r\n    id: \"\",\r\n  });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  //  useEffect(() =>{\r\n  //    if(inputRef && !isLoading){\r\n  //      inputRef.current.focus()\r\n  //    }\r\n  //  },[inputRef,isLoading])\r\n\r\n  useMemo(() => {\r\n    couponColumns = [\r\n      {\r\n        Header: \"Descuento %\",\r\n        accessor: \"discount\",\r\n      },\r\n      {\r\n        Header: \"Name\",\r\n        accessor: (props1) => [props1.name ? props1.name : \"Desactivado\"],\r\n      },\r\n      {\r\n        Header: \"Tienda\",\r\n        accessor: (props1) => [\r\n          props1 ? (props1.profile ? props1.profile_id : \"\") : \"No posee\",\r\n        ],\r\n        Cell: (props1) => {\r\n          const { original } = props1.cell.row;\r\n          const NameStore = nameStore(stores, original.profile_id);\r\n          return (\r\n            <Badge variant=\"warning\" className=\"font_badge\">\r\n              {NameStore || original.profile_id}\r\n            </Badge>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: (props1) => [props1.is_used ? \"Desactivado\" : \"Activo\"],\r\n      },\r\n      {\r\n        Header: \"AcciÃ³n\",\r\n        Cell: (props1) => {\r\n          const { original } = props1.cell.row;\r\n          return (\r\n            <DropdownButton\r\n              size=\"sm\"\r\n              id={\"drop\" + original.id}\r\n              title=\"Seleccione\"\r\n              block=\"true\"\r\n            >\r\n              <Dropdown.Item onClick={() => modifyRegister(original)}>\r\n                Modificar\r\n              </Dropdown.Item>\r\n              <Dropdown.Item onClick={() => deleteRegister(original.id)}>\r\n                Eliminar\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }, []);\r\n\r\n  const onChange = (e) => {\r\n    let val =\r\n      e.target.name === \"is_used\"\r\n        ? e.target.value === \"true\"\r\n          ? true\r\n          : false\r\n        : e.target.value;\r\n    setData({ ...data, [e.target.name]: val });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    const form = e.currentTarget;\r\n    e.preventDefault();\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n      return;\r\n    }\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    let user = localStorage.getItem(\"userApp\");\r\n\r\n    let dataPost = Object.assign({}, data);\r\n    let route = dataPost.id\r\n      ? API_URL + \"coupons/\" + dataPost.id\r\n      : API_URL + \"create-coupons-by-admin/\" + dataPost.id_store;\r\n    let message = dataPost.id\r\n      ? \"Cupon modificado con Ã©xito\"\r\n      : \"Cupon creado con Ã©xito\";\r\n    let request = dataPost.id\r\n      ? axios.put(route, dataPost, { headers: { \"x-access-token\": token } })\r\n      : axios.post(route, dataPost, { headers: { \"x-access-token\": token } });\r\n    delete dataPost.id;\r\n    setIsLoading(true);\r\n    request\r\n      .then((result) => {\r\n        toast.success(message);\r\n        cleanData();\r\n        fetchData();\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        toast.error(\"Verifica haber llenado todos los campos\");\r\n        handleResponseApi(err, props.history);\r\n      });\r\n  };\r\n\r\n  const deleteRegister = (id) => {\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        return (\r\n          <div className=\"custom-ui-edit\">\r\n            <h1>Â¿Esta seguro?</h1>\r\n            <p className=\"font-alert\">Â¿Desea realmente borrar este registro?</p>\r\n            <button\r\n              className=\"button-alert\"\r\n              onClick={() => {\r\n                confirmDeleteRegister(id);\r\n                onClose();\r\n              }}\r\n            >\r\n              Si, Aceptar\r\n            </button>\r\n            <button className=\"button-alert\" onClick={onClose}>\r\n              No\r\n            </button>\r\n          </div>\r\n        );\r\n      },\r\n    });\r\n  };\r\n\r\n  const confirmDeleteRegister = (id) => {\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    setIsLoading(true);\r\n    axios\r\n      .delete(API_URL + \"coupons/\" + id, {\r\n        headers: { \"x-access-token\": token },\r\n      })\r\n      .then((result) => {\r\n        toast.success(\"Registro eliminado con Ã©xito\");\r\n        fetchData();\r\n      })\r\n      .catch((err) => {\r\n        handleResponseApi(err, props.history);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const cleanData = () => {\r\n    setData({ id: \"\", status: true, id_store: \"\", discount: \"\" });\r\n    setValidated(false);\r\n  };\r\n\r\n  const fetchData = () => {\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n\r\n    let promises = [\r\n      axios.get(API_URL + \"coupons\", { headers: { \"x-access-token\": token } }),\r\n      axios.get(API_URL + \"users-all\", {\r\n        params: { role: \"VENDEDOR\" },\r\n        headers: { \"x-access-token\": token },\r\n      }),\r\n    ];\r\n    Promise.all(promises)\r\n      .then((result) => {\r\n        setCoupons(result[0].data.docs);\r\n        console.log(result[0].data.docs);\r\n        setStores(result[1].data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        handleResponseApi(err, props.history);\r\n      });\r\n  };\r\n\r\n  const modifyRegister = (data) => {\r\n    setData({\r\n      ...data,\r\n      name: data.name,\r\n      discount: data.discount,\r\n      date_expiration: moment(data.date_expiration).format(\"YYYY-MM-DD\"),\r\n      id: data.id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={10} md={10} lg={10} xl={10} xs={12}>\r\n        {isLoading ? (\r\n          <LoadingComponent />\r\n        ) : (\r\n          <>\r\n            <Form onSubmit={handleSubmit} noValidate validated={validated}>\r\n              <Row>\r\n                <Col>\r\n                  <h3 className=\"text-center\">Cupones</h3>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <InputFieldRef\r\n                  ref={inputRef}\r\n                  type=\"text\"\r\n                  label=\"Nombre\"\r\n                  name=\"name\"\r\n                  required={true}\r\n                  messageErrors={[\"*Requerido \", \"*6 Caracteres obligatorio\"]}\r\n                  cols=\"col-md-4 col-lg-4 col-sm-4\"\r\n                  value={data.name}\r\n                  maxLength={\"6\"}\r\n                  minLength={\"6\"}\r\n                  handleChange={onChange}\r\n                />\r\n                <InputField\r\n                  type=\"number\"\r\n                  label=\"Descuento %\"\r\n                  name=\"discount\"\r\n                  required={true}\r\n                  messageErrors={[\"*Requerido\"]}\r\n                  cols=\"col-md-4 col-lg-4 col-sm-4\"\r\n                  value={data.discount}\r\n                  handleChange={onChange}\r\n                />\r\n\r\n               <InputField\r\n                  type=\"select\"\r\n                  label=\"Status\"\r\n                  name=\"is_used\"\r\n                  required={true}\r\n                  messageErrors={[\"*Requerido\"]}\r\n                  cols=\"col-md-4 col-lg-4 col-sm-4\"\r\n                  value={data.is_used}\r\n                  handleChange={onChange}\r\n                >\r\n                  <option value={false}>Activo</option>\r\n                  <option value={true}>Desactivado</option>\r\n                </InputField> \r\n              </Row>\r\n              <Row>\r\n                <InputField\r\n                  type=\"select\"\r\n                  label=\"Tiendas\"\r\n                  name=\"id_store\"\r\n                  required={true}\r\n                  messageErrors={[\"*Requerido\"]}\r\n                  cols=\"col-md-4 col-lg-4 col-sm-4\"\r\n                  value={data.id_store}\r\n                  handleChange={onChange}\r\n                >\r\n                  <option value=\"\">--Seleccione--</option>\r\n                  {stores.map((v, i) => (\r\n                    <option value={v.id} key={i}>\r\n                      {v.profile ? v.profile.name_store : \"\"}\r\n                    </option>\r\n                  ))}\r\n                </InputField>\r\n              </Row>\r\n              <Row className=\"justify-content-center\">\r\n                <Col sm={4} md={4} lg={4} xl={4}>\r\n                  <br />\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    block={true}\r\n                    size=\"sm\"\r\n                    type=\"submit\"\r\n                  >\r\n                    Enviar\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n            <br />\r\n            <Table data={coupons} columns={couponColumns} />\r\n          </>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default CouponPage;\r\n","E:\\front_tukitchen\\src\\pages\\PaymentPage.jsx",["131","132","133","134"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Table from \"../components/Table\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge,\r\n  DropdownButton,\r\n  Dropdown,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../utils/constants\";\r\nimport { handleResponseApi, formatNumber } from \"../utils/functions\";\r\nimport { toast } from \"react-toastify\";\r\nimport LoadingComponent from \"../components/LoadingComponent\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport ReactExport from \"react-export-excel\";\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\nlet paymentColumns = [];\r\n\r\nconst PaymentPage = (props) => {\r\n  const [payments, setPayment] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useMemo(() => {\r\n    paymentColumns = [\r\n      {\r\n        Header: \"NÃºmero de Orden\",\r\n        accessor: \"reference\",\r\n      },\r\n      {\r\n        Header: \"MÃ©todo de pago\",\r\n        accessor: \"method\",\r\n      },\r\n      {\r\n        Header: \"Total\",\r\n        accessor: \"total\",\r\n        Cell: (props1) => {\r\n          const original = props1.cell.row.original;\r\n          return formatNumber(original.total, 2, \",\", \".\");\r\n        },\r\n      },\r\n      {\r\n        Header: \"Tienda\",\r\n        accessor: (props1) => [\r\n          props1.profile_id ? props1.profile_id: \"\",\r\n        ],\r\n      },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: (props1) =>\r\n          props1.status === \"IN-PROGRESS\"\r\n            ? [\"Procesando\"]\r\n            : props1.status === \"SUCCESS\"\r\n            ? [\"Confirmado\"]\r\n            : props1.status === \"FAIL\"\r\n            ? [\"Rechazado\"]\r\n            : [\"Rejet\"],\r\n        Cell: (props1) => {\r\n          const { original } = props1.cell.row;\r\n          return (\r\n            <Badge variant={original.status === \"IN-PROGRESS\"\r\n            ? \"warning\"\r\n            : original.status === \"SUCCESS\"\r\n            ? \"success\"\r\n            : original.status === \"FAIL\"\r\n            ? \"danger\"\r\n            : \"Rejet\"} className=\"font_badge\">\r\n              {original.status === \"IN-PROGRESS\"\r\n                ? \"Procesando\"\r\n                : original.status === \"SUCCESS\"\r\n                ? \"Confirmado\"\r\n                : original.status === \"FAIL\"\r\n                ? \"Rechazado\"\r\n                : \"Rejet\"}\r\n            </Badge>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        Header: \"Orden de flow\",\r\n        accessor: (props1) => [props1.flow_order],\r\n      },\r\n      // {\r\n      //   Header: \"Transportista\",\r\n      //   accessor: (props1) => [props1.carrier ? props1.carrier.name : \"\"],\r\n      // },\r\n      {\r\n        Header: \"AcciÃ³n\",\r\n        Cell: (props1) => {\r\n          const { original } = props1.cell.row;\r\n          if (original.status === \"IN-PROGRESS\") {\r\n            return (\r\n              <DropdownButton\r\n                size=\"sm\"\r\n                id={\"drop\" + original.id}\r\n                title=\"Seleccione\"\r\n                block=\"true\"\r\n              >\r\n                <Dropdown.Item onClick={() => changeStatus(original, \"SUCCESS\")}>\r\n                  Confirmar\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => changeStatus(original, \"FAIL\")}>\r\n                  Rechazar\r\n                </Dropdown.Item>\r\n              </DropdownButton>\r\n            );\r\n          } else {\r\n            return \"\";\r\n          }\r\n        },\r\n      },\r\n    ];\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    axios\r\n      .get(API_URL + \"orders\", {params: {not_paginate: true }, headers: { \"x-access-token\": token } })\r\n      .then((result) => {\r\n        setIsLoading(false);\r\n        setPayment(result.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        handleResponseApi(err,props.history)\r\n      });\r\n  };\r\n\r\n  const changeStatus = (data, status) => {\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        return (\r\n          <div className=\"custom-ui-edit\">\r\n            <h1>Â¿Esta seguro?</h1>\r\n            <p className=\"font-alert\">\r\n              Â¿Desea realmente cambiar el estado este registro?\r\n            </p>\r\n            <button\r\n              className=\"button-alert\"\r\n              onClick={() => {\r\n                confirmChangeStatus(data, status);\r\n                onClose();\r\n              }}\r\n            >\r\n              Si, Aceptar\r\n            </button>\r\n            <button className=\"button-alert\" onClick={onClose}>\r\n              No\r\n            </button>\r\n          </div>\r\n        );\r\n      },\r\n    });\r\n  };\r\n\r\n  const confirmChangeStatus = (data, status) => {\r\n    setIsLoading(true);\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    axios\r\n      .put(API_URL + \"orders/\" + data.id, { status: status },{headers: { \"x-access-token\": token }} )\r\n      .then((result) => {\r\n        toast.success(\"Status cambiado correctamente\");\r\n        fetchData();\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        handleResponseApi(err, props.history);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={11} md={11} lg={11} xl={11} xs={12}>\r\n        {isLoading ? (\r\n          <LoadingComponent />\r\n        ) : (\r\n          <>\r\n            <h3 className=\"text-center\">Pedidos</h3>\r\n            <Table data={payments} columns={paymentColumns} />\r\n            <div className=\"text-center\">\r\n              <ExcelFile element={<button type=\"button\" className=\"btn btn-primary\">Exportar a Excel</button>}>\r\n                <ExcelSheet data={payments} name=\"Pedidos-Kitchen\">\r\n                  <ExcelColumn label=\"Usuario\" value=\"user_id\" />\r\n                  <ExcelColumn label=\"Perfil\" value=\"profile_id\" />\r\n                  <ExcelColumn label=\"Numero de orden\" value=\"reference\" />\r\n                  <ExcelColumn label=\"Metodo de pago\" value=\"method\" />\r\n                  <ExcelColumn label=\"Total\" value=\"total\" />\r\n                  <ExcelColumn label=\"Status\" value=\"status\" />\r\n                </ExcelSheet>\r\n              </ExcelFile>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default PaymentPage;\r\n","E:\\front_tukitchen\\src\\pages\\ProfilePage.jsx",["135","136","137","138","139","140","141","142","143"],"import React, {useState, useEffect, useMemo, useRef} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Table from '../components/Table'\r\nimport {Row, Col, Button, Badge, DropdownButton, Dropdown, Form} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport { API_URL } from '../utils/constants'\r\nimport { handleResponseApi } from '../utils/functions'\r\nimport {toast} from 'react-toastify'\r\nimport InputFieldRef from '../components/input/InputComponentRef'\r\nimport InputField from '../components/input/InputComponent'\r\nimport {confirmAlert} from 'react-confirm-alert'\r\nimport LoadingComponent from '../components/LoadingComponent'\r\n\r\nlet categorysColumns = []\r\n\r\nconst ProfilePage = (props) => {\r\n\r\n  const [data,setData] = useState({\r\n    name: \"\",\r\n    last_name: \"\",\r\n    password: \"\",\r\n    password_repeat: \"\",\r\n    id: \"\"\r\n  })\r\n  const [validated, setValidated] = useState(false)\r\n  const [isLoading,setIsLoading] = useState(true)\r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  },[])\r\n\r\n  useEffect(() =>{\r\n    if(inputRef && !isLoading){\r\n      inputRef.current.focus()\r\n    }\r\n  },[inputRef,isLoading])\r\n\r\n  const onChange = e => {\r\n    setData({...data, [e.target.name] : e.target.value  })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n\r\n    const form = e.currentTarget;\r\n    e.preventDefault();\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n      return\r\n    }\r\n\r\n    let dataPost = Object.assign({},data)\r\n    if(dataPost.password !== dataPost.password_repeat){\r\n      toast.error('Error, sus contraseÃ±as no coinciden')\r\n      return\r\n    }\r\n    let token = localStorage.getItem('tokenApp')\r\n    let message = \"Perfil modificado con Ã©xito\"\r\n    let promises = [\r\n      dataPost.password.length===0 ? null : axios.put(API_URL+'users/'+dataPost.id, {password : dataPost.password}, { headers: { \"x-access-token\": token } }),\r\n      axios.put(API_URL+'profile/', dataPost ,{ headers: { \"x-access-token\": token } }),\r\n    ]\r\n    \r\n    setIsLoading(true)\r\n    Promise.all(promises).then(result => {\r\n      toast.success(message)\r\n      setTimeout(function () {\r\n        goToDashboard()\r\n      }, 1500);\r\n    }).catch(err => {\r\n      setIsLoading(false)\r\n      handleResponseApi(err,props.history)\r\n    })\r\n  }\r\n\r\n const fetchData = () => {\r\n  let token = localStorage.getItem('tokenApp')\r\n   axios.get(API_URL+\"users\", { headers: { \"x-access-token\": token } }).then(result => {\r\n       setIsLoading(false)\r\n       if(result.data.profile){\r\n         let user = JSON.parse(localStorage.getItem('userApp'))\r\n         setData({...data,\r\n           email: result.data.profile.email,\r\n           name: result.data.profile.name,\r\n           last_name: result.data.profile.last_name,\r\n           id: result.data.profile.id,\r\n           rut : user.rut\r\n         })\r\n       }\r\n   }).catch(err => {\r\n     setIsLoading(false)\r\n     handleResponseApi(err,props.history)\r\n   })\r\n }\r\n\r\n const goToDashboard = () => {\r\n    props.history.replace('/')\r\n }\r\n\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={10} md={10} lg={10} xl={10} xs={12}>\r\n      {isLoading ? (\r\n        <LoadingComponent />\r\n      ) : (\r\n        <>\r\n          <Form onSubmit={handleSubmit} noValidate validated={validated}>\r\n            <Row>\r\n              <Col>\r\n                <h4 className=\"\">Datos del usuario</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <InputFieldRef\r\n                ref={inputRef}\r\n                type='password'\r\n                label='Password'\r\n                name='password'\r\n                required={false}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.password}\r\n                handleChange={onChange}\r\n              />\r\n              <InputField\r\n                type='password'\r\n                label='Confirme su Password'\r\n                name='password_repeat'\r\n                required={false}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.password_repeat}\r\n                handleChange={onChange}\r\n              />\r\n            </Row>\r\n            <br/>\r\n            <Row>\r\n              <Col>\r\n                <h4>Datos del Perfil</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <InputField\r\n                type='email'\r\n                label='Email'\r\n                name='email'\r\n                required={true}\r\n                messageErrors={[\r\n                  '*Requerido ','*Formato tipo email'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.email}\r\n                handleChange={onChange}\r\n              />\r\n              <InputField\r\n                type='text'\r\n                label='Nombre'\r\n                name='name'\r\n                required={true}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.name}\r\n                handleChange={onChange}\r\n              />\r\n              <InputField\r\n                type='text'\r\n                label='Apellido'\r\n                name='last_name'\r\n                required={true}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.last_name}\r\n                handleChange={onChange}\r\n              />\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n              <Col sm={4} md={4} lg={4} xl={4}>\r\n                <br/>\r\n                <Button variant=\"primary\" block={true} size=\"sm\" type=\"submit\">Enviar</Button>\r\n              </Col>\r\n              <Col sm={4} md={4} lg={4} xl={4}>\r\n                <br/>\r\n                <Button variant=\"danger\" block={true} size=\"sm\" type=\"button\" onClick={goToDashboard}>Volver</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </>\r\n      )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfilePage\r\n","E:\\front_tukitchen\\src\\pages\\DashboardPage.jsx",["144","145","146"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Table from \"../components/Table\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../utils/constants\";\r\nimport { handleResponseApi } from \"../utils/functions\";\r\nimport { toast } from \"react-toastify\";\r\nimport LoadingComponent from \"../components/LoadingComponent\";\r\nimport ModalComponent from \"../components/ModalComponent\";\r\n\r\nlet productsColumns = [];\r\n\r\nconst DashboardPage = (props) => {\r\n  const [stores, setStores] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useMemo(() => {\r\n    productsColumns = [\r\n      {\r\n        Header: \"Nombre\",\r\n        accessor: (props1) => [\r\n          props1.profile\r\n            ? props1.profile.name_store + \" - \" + props1.profile.id\r\n            : \"\",\r\n        ],\r\n      },\r\n      {\r\n        Header: \"DirecciÃ³n\",\r\n        accessor: (props1) => [props1.profile ? props1.profile.address : \"\"],\r\n        Cell: (props1) => {\r\n          const { original } = props1.cell.row;\r\n          return (\r\n            <OverlayTrigger\r\n              placement={\"right\"}\r\n              overlay={\r\n                <Tooltip id=\"tooltip-disabled2\">\r\n                  {original.user_address.map((v, i) => (\r\n                    <ul className=\"list-group\" key={i}>\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        style={{\r\n                          backgroundColor: \"black\",\r\n                          color: \"white\",\r\n                          borderBottom: \"1px solid white\",\r\n                        }}\r\n                      >\r\n                        <b>DirecciÃ³n # {i + 1}: </b> {v.address}\r\n                      </li>\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        style={{\r\n                          backgroundColor: \"black\",\r\n                          color: \"white\",\r\n                          borderBottom: \"1px solid white\",\r\n                        }}\r\n                      >\r\n                        <b>Ciudad: </b> {v.city}\r\n                      </li>\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        style={{\r\n                          backgroundColor: \"black\",\r\n                          color: \"white\",\r\n                          borderBottom: \"1px solid white\",\r\n                        }}\r\n                      >\r\n                        <b>DescripciÃ³n: </b> {v.description}\r\n                      </li>\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        style={{\r\n                          backgroundColor: \"black\",\r\n                          color: \"white\",\r\n                          borderBottom: \"1px solid white\",\r\n                        }}\r\n                      >\r\n                        <b>Latitud: </b> {v.latitude}\r\n                      </li>\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        style={{\r\n                          backgroundColor: \"black\",\r\n                          color: \"white\",\r\n                          borderBottom: \"1px solid white\",\r\n                        }}\r\n                      >\r\n                        <b>Longitud: </b> {v.longitude}\r\n                      </li>\r\n                    </ul>\r\n                  ))}\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button variant=\"link\" size=\"sm\" block={true} type=\"button\">\r\n                {original.user_address.length\r\n                  ? \"Direcciones\"\r\n                  : \"Sin direcciones\"}\r\n              </Button>\r\n            </OverlayTrigger>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        Header: \"Nombre Gerente\",\r\n        accessor: (props1) => [\r\n          props1.profile\r\n            ? props1.profile.name + \"-\" + props1.profile.last_name\r\n            : \"\",\r\n        ],\r\n      },\r\n      {\r\n        Header: \"Rut\",\r\n        accessor: (props1) => [props1.rut],\r\n        Cell: (props1) => {\r\n          return (\r\n            <Badge variant=\"warning\" className=\"font_badge\">\r\n              {props1.cell.row.original.rut}\r\n            </Badge>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        Header: \"AcciÃ³n\",\r\n        Cell: (props1) => {\r\n          return (\r\n            <Col>\r\n              <Button\r\n                variant=\"primary\"\r\n                block={true}\r\n                size=\"size\"\r\n                onClick={() => {\r\n                  setModalShow(true);\r\n                  setData({\r\n                    to: props1.cell.row.original.profile.email,\r\n                    subject: \"\",\r\n                    title: \"\",\r\n                    message: \"\",\r\n                  });\r\n                }}\r\n              >\r\n                Correo\r\n              </Button>\r\n              <Button\r\n                variant=\"primary\"\r\n                block={true}\r\n                size=\"size\"\r\n                onClick={() => changeDesactive(props1.cell.row.original)}\r\n              >\r\n                {\" \"}\r\n                {props1.cell.row.original.status ? \"Desactivar\" : \"Activar\"}\r\n              </Button>\r\n            </Col>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    axios\r\n      .get(API_URL + \"users-all\", {\r\n        params: { role: \"VENDEDOR\" },\r\n        headers: { \"x-access-token\": token },\r\n      })\r\n      .then((result) => {\r\n        setIsLoading(false);\r\n        setStores(result.data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        handleResponseApi(err, props.history);\r\n      });\r\n  };\r\n\r\n  const changeDesactive = (data) => {\r\n    setIsLoading(true);\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    axios\r\n      .put(\r\n        API_URL + \"users/\" + data.id,\r\n        { status: !data.status },\r\n        { headers: { \"x-access-token\": token } }\r\n      )\r\n      .then((result) => {\r\n        toast.success(\"Status cambiado correctamente\");\r\n        fetchData();\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        handleResponseApi(err, props.history);\r\n      });\r\n  };\r\n  const [email, setData] = useState({\r\n    to: \"Email@example.com\",\r\n    subject: \"\",\r\n    title: \"\",\r\n    message: \"\",\r\n  });\r\n  const handleChange = (e) => {\r\n    setData({ ...email, [e.target.name]: e.target.value });\r\n  };\r\n  const sendEmail = () => {\r\n    setIsLoading(true);\r\n    let token = localStorage.getItem(\"tokenApp\");\r\n    if (\r\n      email.title.length > 3 &&\r\n      email.subject.length > 3 &&\r\n      email.message.length > 4\r\n    ) {\r\n      axios\r\n        .post(API_URL + \"api/send-mail-to\", email, {\r\n          headers: { \"x-access-token\": token },\r\n        })\r\n        .then((result) => {\r\n          setIsLoading(false);\r\n          toast.success(\"Correo Enviado\");\r\n          setModalShow(false);\r\n        })\r\n        .catch((err) => {\r\n          setIsLoading(false);\r\n          setModalShow(false);\r\n          toast.error(\"Error al intentar enviar el correo\");\r\n          handleResponseApi(err, props.history);\r\n        });\r\n    } else {\r\n      setIsLoading(false);\r\n      setModalShow(false);\r\n      toast.error(\"Asegurate de llanar todos los campos\");\r\n    }\r\n  };\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={11} md={11} lg={11} xl={11} xs={12}>\r\n        {isLoading ? (\r\n          <LoadingComponent />\r\n        ) : (\r\n          <>\r\n            <h3 className=\"text-center\">Tiendas</h3>\r\n            <Table data={stores} columns={productsColumns} />\r\n          </>\r\n        )}\r\n        <ModalComponent\r\n          show={modalShow}\r\n          data={email}\r\n          handleChange={handleChange}\r\n          sendEmail={sendEmail}\r\n          onHide={() => setModalShow(false)}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;\r\n","E:\\front_tukitchen\\src\\utils\\constants.js",[],"E:\\front_tukitchen\\src\\components\\LayoutComponent.jsx",["147"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport NavbarComponent from './NavbarComponent'\r\nimport {Container, Row, Col} from 'react-bootstrap'\r\nconst LayoutComponent = (props) => {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col>\r\n          <NavbarComponent {...props}/>\r\n        </Col>\r\n      </Row>\r\n      {props.children}\r\n    </Container>\r\n\r\n  )\r\n}\r\n\r\nexport default LayoutComponent\r\n","E:\\front_tukitchen\\src\\components\\LoadingComponent.jsx",["148"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport ReactLoading from 'react-loading';\r\n\r\nconst LoadingComponent = (props) => {\r\n  return (\r\n    <Row className=\"justify-content-center align-items-center\">\r\n      <Col sm={2} md={2} lg={2} className=\"text-center\">\r\n        <ReactLoading type={\"balls\"} color={\"yellow\"} width={'100%'} />\r\n        <br/><br/><br/>\r\n        Cargando...\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default LoadingComponent\r\n","E:\\front_tukitchen\\src\\components\\Table.jsx",["149","150"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport { useTable, useSortBy, useFilters, usePagination} from 'react-table'\r\nimport { matchSorter}  from 'match-sorter'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  .button-pagination{\r\n    margin-right: 10px;\r\n  }\r\n\r\n  .inputPage{\r\n    display: inline-block;\r\n    width: 150px;\r\n    height: 34px;\r\n    padding: 6px 12px;\r\n    font-size: 14px;\r\n    line-height: 1.42857143;\r\n    color: #555;\r\n    background-color: #fff;\r\n    background-image: none;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n  }\r\n\r\n  .inputPageFilter{\r\n    display: inline-block;\r\n    width: 80%;\r\n    height: 34px;\r\n    padding: 6px 12px;\r\n    font-size: 14px;\r\n    line-height: 1.42857143;\r\n    color: #555;\r\n    background-color: #fff;\r\n    background-image: none;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  .table_responsive_eddit{\r\n    overflow-x: auto;\r\n  }\r\n`\r\n\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length\r\n\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Buscar en ${count} registros...`}\r\n      className=\"inputPageFilter\"\r\n    />\r\n  )\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\nfunction DataTable({ columns, data, menuTop, headerColor, headerFontColor }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter(row => {\r\n          const rowValue = row.values[id]\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n    }),\r\n    []\r\n  )\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  )\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    prepareRow,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn, // Be sure to pass the defaultColumn option\r\n      filterTypes,\r\n      initialState: { pageIndex: 0 },\r\n    },\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination\r\n  )\r\n\r\n  // Render the UI for your table\r\n\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      {menuTop ? (\r\n        <div className=\"pagination\">\r\n          <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n            {'<<'}\r\n          </Button>{' '}\r\n          <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n            {'<'}\r\n          </Button>{' '}\r\n          <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => nextPage()} disabled={!canNextPage}>\r\n            {'>'}\r\n          </Button>{' '}\r\n          <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n            {'>>'}\r\n          </Button>{' '}\r\n          <span>\r\n            PÃ¡gina{' '}\r\n            <strong>\r\n              {pageIndex + 1} de {pageOptions.length}\r\n            </strong>{' '}\r\n          </span>\r\n          <span className=\"ml-3\">\r\n            | <span className=\"ml-2\">Ir a la PÃ¡gina:{' '}</span>\r\n            <input\r\n              type=\"number\"\r\n              defaultValue={pageIndex + 1}\r\n              onChange={e => {\r\n                const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                gotoPage(page)\r\n              }}\r\n              className=\"inputPage\"\r\n              onChange={(e) => {\r\n                if(e.target.value > pageOptions.length){\r\n                  e.target.value = 1\r\n                }\r\n              }}\r\n            />\r\n          </span>{' '}\r\n          <select\r\n            value={pageSize}\r\n            onChange={e => {\r\n              setPageSize(Number(e.target.value))\r\n            }}\r\n            className=\"inputPage\"\r\n          >\r\n            {[10, 20, 30, 40, 50].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Mostrar {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n      ) : ''}\r\n      <table {...getTableProps()} className=\"table table-bordered\">\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()} className=\"text-center\">\r\n              {headerGroup.headers.map(column => (\r\n\r\n                <th {...column.getHeaderProps(column.getSortByToggleProps())} style={{ backgroundColor: headerColor ? headerColor : \"rgb(218, 236, 242)\", color: headerFontColor ? headerFontColor : \"black\" }}>\r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' ð½'\r\n                          : ' ð¼'\r\n                        : ''}\r\n                    </span>\r\n                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()} className=\"text-center\">\r\n          {page.map(\r\n            (row, i) =>\r\n              prepareRow(row) || (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  })}\r\n                </tr>\r\n              )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"pagination\">\r\n        <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </Button>{' '}\r\n        <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </Button>{' '}\r\n        <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </Button>{' '}\r\n        <Button size=\"sm\" style={{height:'40px'}} className=\"button-pagination\" variant=\"secondary\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </Button>{' '}\r\n        <span>\r\n          PÃ¡gina{' '}\r\n          <strong>\r\n            {pageIndex + 1} de {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span className=\"ml-3\">\r\n          | <span className=\"ml-2\">Ir a la PÃ¡gina:{' '}</span>\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            className=\"inputPage\"\r\n            onChange={(e) => {\r\n              if(e.target.value > pageOptions.length){\r\n                e.target.value = 1\r\n              }\r\n            }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n          className=\"inputPage\"\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Mostrar {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nconst Table = ({data,columns,menuTop,headerColor,headerFontColor}) => {\r\n\r\n  return (\r\n    <Styles>\r\n      <DataTable data={data} columns={columns} menuTop={menuTop} headerFontColor={headerFontColor} headerColor={headerColor}  />\r\n    </Styles>\r\n  )\r\n}\r\n\r\nTable.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  columns : PropTypes.array.isRequired,\r\n  menuTop: PropTypes.bool,\r\n  headerColor: PropTypes.string,\r\n  headerFontColor: PropTypes.string,\r\n}\r\n\r\nexport default Table\r\n","E:\\front_tukitchen\\src\\components\\input\\InputComponentRef.jsx",["151","152","153"],"import React, { useState,useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form } from 'react-bootstrap'\r\nimport './InputComponent.css'\r\n\r\nconst InputFieldRef = React.forwardRef( (props,ref) => {\r\n\r\n  const classFormGroup = props.cols ? props.cols : \"col-md-6 col-sm-6\"\r\n  if(props.type !== \"select\" && props.type !== \"textarea\"){\r\n    return (\r\n      <Form.Group className={classFormGroup}>\r\n        <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n        <Form.Control\r\n          ref={ref}\r\n          id={props.id ? props.id : props.name}\r\n          type={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          required={props.required}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          className={props.className ? props.className : ''}\r\n          step={props.step ? props.step : ''}\r\n          onKeyUp={ props.handleKeyUp ? props.handleKeyUp : () => {} }\r\n          className={props.className ? props.className+\" form-control-sm\" : \"form-control-sm\"}\r\n          style={props.style ? props.style : {}}\r\n          autoComplete={props.autoComplete ? props.autoComplete : 'xxx'}\r\n          maxLength={props.maxLength ? props.maxLength : \"\"}\r\n          minLength={props.minLength ? props.minLength : \"\"}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }else if(props.type === \"select\"){\r\n    return(\r\n      <Form.Group className={classFormGroup}>\r\n        <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n        <Form.Control\r\n          id={props.id ? props.id : props.name}\r\n          as={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          required={props.required}\r\n          multiple={props.multiple ? props.multiple : false}\r\n          ref={ref ? ref : null}\r\n          className={props.className ? props.className+\" form-control-sm\" : \"form-control-sm\"}\r\n          style={props.style ? props.style : {}}\r\n          autoComplete={props.autoComplete ? props.autoComplete : 'xxx'}\r\n        >\r\n          {props.children}\r\n        </Form.Control>\r\n        <Form.Control.Feedback type=\"invalid\">\r\n\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }else if(props.type === \"textarea\"){\r\n    return(\r\n      <Form.Group className={classFormGroup}>\r\n        <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n        <Form.Control\r\n          id={props.id ? props.id : props.name}\r\n          as={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          required={props.required}\r\n          rows={props.rows ? props.rows : 2}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          onKeyUp={ props.handleKeyUp ? props.handleKeyUp : () => {} }\r\n          ref={ref ? ref : null}\r\n          className={props.className ? props.className+\" form-control-sm\" : \"form-control-sm\"}\r\n          style={props.style ? props.style : {}}\r\n          autoComplete={props.autoComplete ? props.autoComplete : 'xxx'}\r\n          maxLength={props.maxLength ? props.maxLength : \"\"}\r\n          minLength={props.minLength ? props.minLength : \"\"}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n          \r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }\r\n\r\n})\r\n\r\nInputFieldRef.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string,\r\n  handleChange: PropTypes.func.isRequired,\r\n  handleKeyUp: PropTypes.func,\r\n  value: PropTypes.any,\r\n  cols: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  required: PropTypes.bool,\r\n  errors: PropTypes.array,\r\n  messageErrors: PropTypes.array,\r\n  readonly: PropTypes.bool,\r\n  multiple: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  steps: PropTypes.string,\r\n  autoComplete: PropTypes.bool,\r\n  maxLength: PropTypes.string,\r\n  minLength: PropTypes.string,\r\n}\r\n\r\nexport default InputFieldRef\r\n","E:\\front_tukitchen\\src\\components\\input\\InputComponent.jsx",["154","155","156"],"import React, { useState,useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form } from 'react-bootstrap'\r\nimport './InputComponent.css'\r\n\r\nconst InputField = props => {\r\n\r\n  const classFormGroup = props.cols ? props.cols : \"col-md-6 col-sm-6\"\r\n  if(props.type !== \"select\" && props.type !== \"textarea\"){\r\n    return (\r\n      <Form.Group className={classFormGroup}>\r\n        <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n        <Form.Control\r\n          id={props.id ? props.id : props.name}\r\n          type={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          required={props.required}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          className={props.className ? props.className : ''}\r\n          step={props.step ? props.step : ''}\r\n          onKeyUp={ props.handleKeyUp ? props.handleKeyUp : () => {} }\r\n          className={props.className ? props.className+\" form-control-sm\" : \"form-control-sm\"}\r\n          style={props.style ? props.style : {}}\r\n          autoComplete={props.autoComplete ? props.autoComplete : 'xxx'}\r\n          maxLength={props.maxLength ? props.maxLength : \"\"}\r\n          minLength={props.minLength ? props.minLength : \"\"}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }else if(props.type === \"select\"){\r\n    return(\r\n      <Form.Group className={classFormGroup}>\r\n        <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n        <Form.Control\r\n          id={props.id ? props.id : props.name}\r\n          as={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          required={props.required}\r\n          multiple={props.multiple ? props.multiple : false}\r\n          className={props.className ? props.className+\" form-control-sm\" : \"form-control-sm\"}\r\n          style={props.style ? props.style : {}}\r\n          autoComplete={props.autoComplete ? props.autoComplete : 'xxx'}\r\n        >\r\n          {props.children}\r\n        </Form.Control>\r\n        <Form.Control.Feedback type=\"invalid\">\r\n\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }else if(props.type === \"textarea\"){\r\n    return(\r\n      <Form.Group className={classFormGroup}>\r\n        <Form.Label className=\"fontBold\">{props.label}</Form.Label>\r\n        <Form.Control\r\n          id={props.id ? props.id : props.name}\r\n          as={props.type}\r\n          name={props.name}\r\n          onChange={props.handleChange}\r\n          value={props.value}\r\n          placeholder={props.placeholder ? props.placeholder : ''}\r\n          required={props.required}\r\n          rows={props.rows ? props.rows : 2}\r\n          readOnly={props.readonly ? props.readonly : false}\r\n          onKeyUp={ props.handleKeyUp ? props.handleKeyUp : () => {} }\r\n          className={props.className ? props.className+\" form-control-sm\" : \"form-control-sm\"}\r\n          style={props.style ? props.style : {}}\r\n          autoComplete={props.autoComplete ? props.autoComplete : 'xxx'}\r\n          maxLength={props.maxLength ? props.maxLength : \"\"}\r\n          minLength={props.minLength ? props.minLength : \"\"}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n\r\n            {\r\n              props.messageErrors.map((v,i) => {\r\n                return <span key={i} className=\"error-input\">{v}</span>\r\n              })\r\n            }\r\n\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nInputField.propTypes = {\r\n  label: PropTypes.any,\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  id: PropTypes.string,\r\n  handleChange: PropTypes.func.isRequired,\r\n  handleKeyUp: PropTypes.func,\r\n  value: PropTypes.any,\r\n  cols: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  required: PropTypes.bool,\r\n  errors: PropTypes.array,\r\n  messageErrors: PropTypes.array,\r\n  readonly: PropTypes.bool,\r\n  multiple: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  steps: PropTypes.string,\r\n  style: PropTypes.object,\r\n  autoComplete: PropTypes.bool,\r\n  maxLength: PropTypes.string,\r\n  minLength: PropTypes.string,\r\n}\r\n\r\nexport default InputField\r\n","E:\\front_tukitchen\\src\\components\\NavbarComponent.jsx",["157","158"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Navbar,Nav,Image } from 'react-bootstrap'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { setAuthorizationToken } from '../utils/functions'\r\n\r\nconst NavbarComponent = (props) => {\r\n\r\n  const logout = (e) => {\r\n    e.preventDefault()\r\n    localStorage.removeItem('tokenApp')\r\n    localStorage.removeItem('userApp')\r\n    setAuthorizationToken(null)\r\n    document.getElementById(\"linkDh\").click()\r\n  }\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand as={Link} to=\"/\"><Image src={require('../assets/img/logo.png').default} width=\"100\" /></Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link as={Link} to=\"/dashboard\" style={{color: \"white\"}}>Dashboard</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/product_premium\" style={{color: \"white\"}}>Productos</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/payments\" style={{color: \"white\"}}>Pedidos</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/coupons\" style={{color: \"white\"}}>Cupones</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/categorys\" style={{color: \"white\"}}>Categorias</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/register\" style={{color: \"white\"}}>Nueva Tienda</Nav.Link>\r\n        <Nav.Link as={Link} to=\"/\" style={{display: \"none\"}} id=\"linkDh\"></Nav.Link>\r\n      </Nav>\r\n      <Nav className=\"align-items-lg-center ml-auto\">\r\n        <Nav.Link as={Link} to=\"/profile\" style={{color: \"white\"}}>Perfil</Nav.Link>\r\n        <Nav.Link as={\"a\"} href=\"\" onClick={logout} style={{color: \"white\"}}>Salir</Nav.Link>\r\n      </Nav>\r\n  </Navbar>\r\n  )\r\n}\r\n\r\nexport default NavbarComponent\r\n","E:\\front_tukitchen\\src\\pages\\RegisterUser.jsx",["159","160","161","162","163","164","165"],"import React, {useState, useEffect, useMemo, useRef} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Table from '../components/Table'\r\nimport {Row, Col, Button,  Form} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport { API_URL } from '../utils/constants'\r\nimport { handleResponseApi, formatRut } from '../utils/functions'\r\nimport {toast} from 'react-toastify'\r\nimport InputFieldRef from '../components/input/InputComponentRef'\r\nimport InputField from '../components/input/InputComponent'\r\nimport {confirmAlert} from 'react-confirm-alert'\r\nimport LoadingComponent from '../components/LoadingComponent'\r\n\r\nlet categorysColumns = []\r\n\r\nconst RegisterUser = (props) => {\r\n\r\n  const [data,setData] = useState({\r\n    password: \"\",\r\n    password_repeat: \"\",\r\n    rut: \"\",\r\n    role: \"VENDEDOR\",\r\n  })\r\n  const [validated, setValidated] = useState(false)\r\n  const [isLoading,setIsLoading] = useState(true)\r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  },[])\r\n\r\n  useEffect(() =>{\r\n    if(inputRef && !isLoading){\r\n      inputRef.current.focus()\r\n    }\r\n  },[inputRef,isLoading])\r\n\r\n  const onChange = e => {\r\n    setData({...data, [e.target.name] : e.target.name === \"rut\" ? formatRut(e.target.value) : e.target.value })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n\r\n    const form = e.currentTarget;\r\n    e.preventDefault();\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n      return\r\n    }\r\n\r\n    let dataPost = Object.assign({},data)\r\n    if(dataPost.password !== dataPost.password_repeat){\r\n      toast.error('Error, sus contraseÃ±as no coinciden')\r\n      return\r\n    }\r\n    let route = API_URL+'users'\r\n    let message = \"Perfil Creado con Ã©xito\"\r\n    let request = axios.post(route,dataPost)\r\n    setIsLoading(true)\r\n    request.then(result => {\r\n      toast.success(message)\r\n      setTimeout(function () {\r\n        goToDashboard()\r\n      }, 1500);\r\n    }).catch(err => {\r\n      setIsLoading(false)\r\n      toast.error(\"Este rut ya esta registrado\")\r\n    })\r\n  }\r\n\r\n const fetchData = () => {\r\n  let token = localStorage.getItem('tokenApp')\r\n   axios.get(API_URL+\"users\", { headers: { \"x-access-token\": token } }).then(result => {\r\n       setIsLoading(false)\r\n       if(result.data.profile){\r\n         let user = JSON.parse(localStorage.getItem('userApp'))\r\n       }\r\n   }).catch(err => {\r\n     setIsLoading(false)\r\n     handleResponseApi(err,props.history)\r\n   })\r\n }\r\n\r\n const goToDashboard = () => {\r\n    props.history.replace('/')\r\n }\r\n\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col sm={10} md={10} lg={10} xl={10} xs={12}>\r\n      {isLoading ? (\r\n        <LoadingComponent />\r\n      ) : (\r\n        <>\r\n          <Form onSubmit={handleSubmit} noValidate validated={validated}>\r\n            <Row>\r\n              <Col>\r\n                <h4>Datos del vendedor de la nueva Tienda</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <InputField\r\n                type='text'\r\n                label='Rut'\r\n                name='rut'\r\n                required={true}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.rut}\r\n                handleChange={onChange}\r\n              />\r\n            </Row>\r\n            <Row>\r\n              <InputFieldRef\r\n                ref={inputRef}\r\n                type='password'\r\n                label='Password'\r\n                name='password'\r\n                required={false}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.password}\r\n                handleChange={onChange}\r\n              />\r\n              <InputField\r\n                type='password'\r\n                label='Confirme su Password'\r\n                name='password_repeat'\r\n                required={false}\r\n                messageErrors={[\r\n                  '*Requerido'\r\n                ]}\r\n                cols='col-md-4 col-lg-4 col-sm-4'\r\n                value={data.password_repeat}\r\n                handleChange={onChange}\r\n              />\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n              <Col sm={4} md={4} lg={4} xl={4}>\r\n                <br/>\r\n                <Button variant=\"primary\" block={true} size=\"sm\" type=\"submit\">Registar</Button>\r\n              </Col>\r\n              <Col sm={4} md={4} lg={4} xl={4}>\r\n                <br/>\r\n                <Button variant=\"danger\" block={true} size=\"sm\" type=\"button\" onClick={goToDashboard}>Volver</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </>\r\n      )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default RegisterUser;\r\n","E:\\front_tukitchen\\src\\utils\\nameStore.js",[],"E:\\front_tukitchen\\src\\components\\ModalComponent.jsx",["166"],"import React from \"react\";\r\nimport { Row, Col, Button, Modal, Form } from \"react-bootstrap\";\r\nconst CenterModal = (props) => {\r\n  const { data, handleChange, sendEmail} = props;\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Form>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">Enviar correo...</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Col sm=\"12\" className=\"mb-2\">\r\n              <Form.Control\r\n                name=\"to\"\r\n                readOnly\r\n                defaultValue={data.to}\r\n                onChange={handleChange}\r\n              />\r\n            </Col>\r\n            <Col sm=\"12\" className=\"mb-2\">\r\n              <Form.Label>Asunto</Form.Label>\r\n              <Form.Control\r\n                name=\"subject\"\r\n                value={data.subject}\r\n                onChange={handleChange}\r\n                placeholder=\"Asunto\"\r\n              />\r\n            </Col>\r\n            <Col sm=\"12\" className=\"mb-2\">\r\n              <Form.Label>Titulo</Form.Label>\r\n              <Form.Control\r\n                name=\"title\"\r\n                value={data.title}\r\n                onChange={handleChange}\r\n                placeholder=\"Titulo\"\r\n              />\r\n            </Col>\r\n            <Col sm=\"12\">\r\n              <Form.Label>Mensaje</Form.Label>\r\n              <Form.Control\r\n                name=\"message\"\r\n                value={data.message}\r\n                onChange={handleChange}\r\n                placeholder=\"Mensaje\"\r\n                as=\"textarea\"\r\n                rows={3}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={props.onHide}>\r\n            Cerrar\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={sendEmail}>\r\n            Enviar\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nexport default CenterModal;\r\n",{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"175","line":5,"column":26,"nodeType":"173","messageId":"174","endLine":5,"endColumn":31},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"176","line":5,"column":10,"nodeType":"173","messageId":"174","endLine":5,"endColumn":24},{"ruleId":"171","severity":1,"message":"175","line":5,"column":26,"nodeType":"173","messageId":"174","endLine":5,"endColumn":31},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"177","severity":1,"message":"178","line":19,"column":6,"nodeType":"179","endLine":19,"endColumn":8,"suggestions":"180"},{"ruleId":"177","severity":1,"message":"181","line":71,"column":6,"nodeType":"179","endLine":71,"endColumn":8,"suggestions":"182"},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"183","line":4,"column":27,"nodeType":"173","messageId":"174","endLine":4,"endColumn":32},{"ruleId":"171","severity":1,"message":"184","line":7,"column":29,"nodeType":"173","messageId":"174","endLine":7,"endColumn":41},{"ruleId":"177","severity":1,"message":"178","line":25,"column":5,"nodeType":"179","endLine":25,"endColumn":7,"suggestions":"185"},{"ruleId":"177","severity":1,"message":"186","line":52,"column":5,"nodeType":"179","endLine":52,"endColumn":7,"suggestions":"187"},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"184","line":15,"column":29,"nodeType":"173","messageId":"174","endLine":15,"endColumn":41},{"ruleId":"177","severity":1,"message":"178","line":41,"column":6,"nodeType":"179","endLine":41,"endColumn":8,"suggestions":"188"},{"ruleId":"177","severity":1,"message":"189","line":100,"column":6,"nodeType":"179","endLine":100,"endColumn":8,"suggestions":"190"},{"ruleId":"171","severity":1,"message":"191","line":121,"column":9,"nodeType":"173","messageId":"174","endLine":121,"endColumn":13},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"192","line":7,"column":3,"nodeType":"173","messageId":"174","endLine":7,"endColumn":9},{"ruleId":"177","severity":1,"message":"178","line":32,"column":6,"nodeType":"179","endLine":32,"endColumn":8,"suggestions":"193"},{"ruleId":"177","severity":1,"message":"181","line":123,"column":6,"nodeType":"179","endLine":123,"endColumn":8,"suggestions":"194"},{"ruleId":"171","severity":1,"message":"195","line":1,"column":37,"nodeType":"173","messageId":"174","endLine":1,"endColumn":44},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"196","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":13},{"ruleId":"171","severity":1,"message":"183","line":4,"column":27,"nodeType":"173","messageId":"174","endLine":4,"endColumn":32},{"ruleId":"171","severity":1,"message":"197","line":4,"column":34,"nodeType":"173","messageId":"174","endLine":4,"endColumn":48},{"ruleId":"171","severity":1,"message":"198","line":4,"column":50,"nodeType":"173","messageId":"174","endLine":4,"endColumn":58},{"ruleId":"171","severity":1,"message":"199","line":11,"column":9,"nodeType":"173","messageId":"174","endLine":11,"endColumn":21},{"ruleId":"171","severity":1,"message":"200","line":14,"column":5,"nodeType":"173","messageId":"174","endLine":14,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":31,"column":5,"nodeType":"179","endLine":31,"endColumn":7,"suggestions":"201"},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"177","severity":1,"message":"178","line":27,"column":6,"nodeType":"179","endLine":27,"endColumn":8,"suggestions":"202"},{"ruleId":"177","severity":1,"message":"203","line":169,"column":6,"nodeType":"179","endLine":169,"endColumn":8,"suggestions":"204"},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"205","severity":1,"message":"206","line":175,"column":15,"nodeType":"207","endLine":179,"endColumn":17},{"ruleId":"205","severity":1,"message":"206","line":261,"column":13,"nodeType":"207","endLine":265,"endColumn":15},{"ruleId":"171","severity":1,"message":"208","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":25},{"ruleId":"171","severity":1,"message":"209","line":1,"column":26,"nodeType":"173","messageId":"174","endLine":1,"endColumn":35},{"ruleId":"205","severity":1,"message":"206","line":26,"column":11,"nodeType":"207","endLine":26,"endColumn":95},{"ruleId":"171","severity":1,"message":"208","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":25},{"ruleId":"171","severity":1,"message":"209","line":1,"column":26,"nodeType":"173","messageId":"174","endLine":1,"endColumn":35},{"ruleId":"205","severity":1,"message":"206","line":25,"column":11,"nodeType":"207","endLine":25,"endColumn":95},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"210","line":4,"column":16,"nodeType":"173","messageId":"174","endLine":4,"endColumn":24},{"ruleId":"171","severity":1,"message":"195","line":1,"column":37,"nodeType":"173","messageId":"174","endLine":1,"endColumn":44},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"196","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":13},{"ruleId":"171","severity":1,"message":"199","line":11,"column":9,"nodeType":"173","messageId":"174","endLine":11,"endColumn":21},{"ruleId":"171","severity":1,"message":"200","line":14,"column":5,"nodeType":"173","messageId":"174","endLine":14,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":30,"column":5,"nodeType":"179","endLine":30,"endColumn":7,"suggestions":"211"},{"ruleId":"171","severity":1,"message":"191","line":77,"column":14,"nodeType":"173","messageId":"174","endLine":77,"endColumn":18},{"ruleId":"171","severity":1,"message":"212","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":13},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","'toast' is defined but never used.","'ToastContainer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["215"],"React Hook useMemo has a missing dependency: 'changeStatus'. Either include it or remove the dependency array.",["216"],"'Badge' is defined but never used.","'formatNumber' is defined but never used.",["217"],"React Hook useMemo has a missing dependency: 'deleteRegister'. Either include it or remove the dependency array.",["218"],["219"],"React Hook useMemo has missing dependencies: 'deleteRegister' and 'stores'. Either include them or remove the dependency array.",["220"],"'user' is assigned a value but never used.","'Button' is defined but never used.",["221"],["222"],"'useMemo' is defined but never used.","'Table' is defined but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'confirmAlert' is defined but never used.","'categorysColumns' is assigned a value but never used.",["223"],["224"],"React Hook useMemo has a missing dependency: 'changeDesactive'. Either include it or remove the dependency array.",["225"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'useEffect' is defined but never used.","'Redirect' is defined but never used.",["226"],"'Row' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"227","fix":"231"},{"desc":"232","fix":"233"},{"desc":"227","fix":"234"},{"desc":"235","fix":"236"},{"desc":"227","fix":"237"},{"desc":"229","fix":"238"},{"desc":"227","fix":"239"},{"desc":"227","fix":"240"},{"desc":"241","fix":"242"},{"desc":"227","fix":"243"},"Update the dependencies array to be: [fetchData]",{"range":"244","text":"245"},"Update the dependencies array to be: [changeStatus]",{"range":"246","text":"247"},{"range":"248","text":"245"},"Update the dependencies array to be: [deleteRegister]",{"range":"249","text":"250"},{"range":"251","text":"245"},"Update the dependencies array to be: [deleteRegister, stores]",{"range":"252","text":"253"},{"range":"254","text":"245"},{"range":"255","text":"247"},{"range":"256","text":"245"},{"range":"257","text":"245"},"Update the dependencies array to be: [changeDesactive]",{"range":"258","text":"259"},{"range":"260","text":"245"},[673,675],"[fetchData]",[1989,1991],"[changeStatus]",[949,951],[1692,1694],"[deleteRegister]",[1244,1246],[2903,2905],"[deleteRegister, stores]",[963,965],[3609,3611],[1024,1026],[806,808],[5489,5491],"[changeDesactive]",[994,996]]